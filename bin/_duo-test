#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Command = require('commander').Command;
var exists = require('fs').existsSync;
var glob = require('glob').sync;
var pkg = require('../package.json');
var resolve = require('path').resolve;

/**
 * Command Line Interface.
 */

var program = new Command('duo-test')
  .version(pkg.version)
  .option('-r, --root <dir>', 'set root directory', process.cwd())
  .option('-u, --use <plugin>', 'use transform plugin(s)', collect, []);

/**
 * Starts a web server to perform browser testing.
 *
 * @see ../lib/browser.js
 */

program
  .command('browser [files...]')
  .description('start a web server for performing browser tests')
  .action(function (files, options) {
    run('browser', files, options);
  });


/**
 * Perform headless testing using mocha-phantomjs.
 *
 * @see ../lib/phantom.js
 */

program
  .command('phantomjs [files...]')
  .description('run headless tests using mocha-phantomjs')
  .action(function (files, options) {
    run('phantom', files, options);
  });

// parse the CLI arguments
program.parse(process.argv);

if (!program.args.length) program.help();


/**
 * Gathers the necessary arguments for, and then kicks off the specific test
 * command.
 *
 * @param {Object} options
 * @param {Function} runner
 */

function run(runner, files, options) {
  var runner = require('../lib/' + runner);
  var root = options.parent.root;
  var entries = getEntries(files, root);
  var plugins = getPlugins(options.parent.use, root);

  runner(entries, {
    root: root,
    plugins: plugins
  });
}


/**
 * Retrieve the list of entry files to use. (defaults to `test/*.js` just like
 * mocha)
 *
 * @param {Array:String} [input]
 * @returns {Array:String}
 */

function getEntries(input, root) {
  if (input.length) return input;
  return glob('test/*.js', { cwd: root });
}

/**
 * Retrieve an array of plugins from `--use`.
 *
 * @param {Array:String} input
 * @return {Array:Function}
 */

function getPlugins(input, root) {
  return input.map(function (plugin) {
    try {
      var local = resolve(root, plugin);
      var npm = resolve(root, "node_modules", plugin);
      var cwd = resolve(process.cwd(), "node_modules", plugin);
      var mod;

      if (exists(local)) mod = require(local);
      else if (exists(local + '.js')) mod = require(local);
      else if (exists(npm)) mod = require(npm);
      else mod = require(cwd);

      return Array.isArray(mod) ? mod : mod();
    } catch (e) {
      error(e);
    }
  }, []);
}

/**
 * Helper to capture list of plugins from CLI
 */

function collect(val, memo) {
  val.split(',').forEach(function (val) {
    memo.push(val);
  });

  return memo;
}
